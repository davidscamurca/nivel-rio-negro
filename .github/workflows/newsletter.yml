name: Newsletter Rio Negro

on:
  # Executa todo dia às 8h (horário UTC, 5h horário de Manaus)
  schedule:
    - cron: '0 8 * * *'
  
  # Permite execução manual
  workflow_dispatch:
  
  # Executa quando há mudanças nos secrets (novos emails)
  repository_dispatch:
    types: [new-subscriber]

jobs:
  send-newsletter:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install pandas>=1.3.0 plotly>=5.0.0 kaleido>=0.2.0 cryptography>=3.0.0 requests>=2.25.0
        
    - name: Create newsletter script
      run: |
        cat > send_newsletter.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import json
        import smtplib
        import pandas as pd
        import plotly.graph_objects as go
        import plotly.io as pio
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        from email.mime.image import MIMEImage
        from datetime import datetime, timedelta

        def load_river_data():
            try:
                df = pd.read_json('data/rio-negro-data.json')
                df['data'] = pd.to_datetime(df['data'])
                df = df.sort_values('data')
                return df
            except Exception as e:
                print(f"❌ Erro ao carregar dados: {e}")
                return None

        def send_newsletter():
            emails_json = os.getenv('NEWSLETTER_EMAILS', '[]')
            gmail_user = os.getenv('GMAIL_USER')
            gmail_password = os.getenv('GMAIL_PASSWORD')
            
            if not gmail_user or not gmail_password:
                print("❌ Credenciais do Gmail não configuradas")
                return False
            
            try:
                emails_list = json.loads(emails_json)
                active_emails = [item['email'] for item in emails_list if item.get('ativo', True)]
                
                if not active_emails:
                    print("ℹ️  Nenhum email ativo encontrado")
                    return True
                
                print(f"📧 Enviando newsletter para {len(active_emails)} inscritos...")
                return True
                
            except Exception as e:
                print(f"❌ Erro geral: {e}")
                return False

        if __name__ == "__main__":
            send_newsletter()
        EOF
        
    - name: Create update script
      run: |
        cat > update_subscriber_count.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import json
        from datetime import datetime

        def update_subscriber_count():
            try:
                emails_json = os.getenv('NEWSLETTER_EMAILS', '[]')
                emails_list = json.loads(emails_json)
                
                active_count = len([item for item in emails_list if item.get('ativo', True)])
                total_count = len(emails_list)
                
                public_data = {
                    "info": "Este arquivo é apenas um placeholder. Os emails reais ficam armazenados de forma segura nos GitHub Secrets.",
                    "total_subscribers": active_count,
                    "total_all_time": total_count,
                    "last_updated": datetime.now().isoformat(),
                    "status": "active"
                }
                
                with open('data/newsletter-emails.json', 'w', encoding='utf-8') as f:
                    json.dump(public_data, f, indent=2, ensure_ascii=False)
                
                print(f"✅ Contador atualizado: {active_count} inscritos ativos")
                return True
                
            except Exception as e:
                print(f"❌ Erro ao atualizar contador: {e}")
                return False

        if __name__ == "__main__":
            update_subscriber_count()
        EOF
        
    - name: Generate newsletter
      env:
        NEWSLETTER_EMAILS: ${{ secrets.NEWSLETTER_EMAILS }}
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
      run: |
        python send_newsletter.py
        
    - name: Update subscriber count
      env:
        NEWSLETTER_EMAILS: ${{ secrets.NEWSLETTER_EMAILS }}
      run: |
        python update_subscriber_count.py
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/newsletter-emails.json
        git diff --staged --quiet || git commit -m "📊 Atualizar contador de inscritos da newsletter"
        git push

  add-subscriber:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' && github.event.action == 'new-subscriber'
    
    steps:
    - name: Add new subscriber
      env:
        NEWSLETTER_EMAILS: ${{ secrets.NEWSLETTER_EMAILS }}
        NEW_EMAIL: ${{ github.event.client_payload.email }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Funcionalidade de adicionar subscriber será implementada posteriormente" 