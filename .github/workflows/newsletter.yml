name: Newsletter Rio Negro

on:
  # Executa todo dia √†s 8h (hor√°rio UTC, 5h hor√°rio de Manaus)
  schedule:
    - cron: '0 8 * * *'
  
  # Permite execu√ß√£o manual
  workflow_dispatch:
  
  # Executa quando h√° mudan√ßas nos secrets (novos emails)
  repository_dispatch:
    types: [new-subscriber]

jobs:
  send-newsletter:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas plotly kaleido requests
        
    - name: Send Newsletter
      env:
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
        VERCEL_API_URL: ${{ secrets.VERCEL_API_URL }}
        NEWSLETTER_API_TOKEN: ${{ secrets.NEWSLETTER_API_TOKEN }}
      run: |
        python3 << 'EOF'
        import os
        import json
        import requests
        import smtplib
        import pandas as pd
        import plotly.graph_objects as go
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        from email.mime.image import MIMEImage
        from datetime import datetime, timedelta
        import io
        
        def fetch_emails_from_api():
            """Busca emails da API do Vercel"""
            api_url = os.environ.get('VERCEL_API_URL', 'https://nivel-rio-negro.vercel.app')
            token = os.environ.get('NEWSLETTER_API_TOKEN')
            
            if not token:
                print("‚ùå Token da API n√£o configurado")
                return []
            
            try:
                headers = {'Authorization': f'Bearer {token}'}
                response = requests.get(f'{api_url}/api/get-emails', headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    emails = data.get('emails', [])
                    print(f"‚úÖ {len(emails)} emails encontrados na API")
                    return emails
                else:
                    print(f"‚ùå Erro na API: {response.status_code}")
                    return []
                    
            except Exception as e:
                print(f"‚ùå Erro ao buscar emails: {e}")
                return []
        
        def load_data():
            """Carrega dados do Rio Negro"""
            try:
                df = pd.read_json('data/rio-negro-data.json')
                df['data'] = pd.to_datetime(df['data'])
                df = df.sort_values('data')
                print(f"‚úÖ {len(df)} registros carregados")
                return df
            except Exception as e:
                print(f"‚ùå Erro ao carregar dados: {e}")
                return None
        
        def create_chart(df):
            """Cria gr√°fico dos √∫ltimos 30 dias"""
            try:
                # √öltimos 30 dias
                end_date = df['data'].max()
                start_date = end_date - timedelta(days=30)
                df_recent = df[df['data'] >= start_date].copy()
                
                if len(df_recent) == 0:
                    return None
                
                # Criar gr√°fico
                fig = go.Figure()
                
                fig.add_trace(go.Scatter(
                    x=df_recent['data'],
                    y=df_recent['nivel_rio'],
                    mode='lines+markers',
                    name='N√≠vel do Rio',
                    line=dict(color='#0072B2', width=2),
                    marker=dict(size=4)
                ))
                
                fig.update_layout(
                    title='N√≠vel do Rio Negro - √öltimos 30 Dias',
                    xaxis_title='Data',
                    yaxis_title='N√≠vel (m)',
                    width=800,
                    height=400,
                    font=dict(family="Arial", size=12),
                    plot_bgcolor='white',
                    paper_bgcolor='white'
                )
                
                # Salvar como imagem
                img_bytes = fig.to_image(format="png", engine="kaleido")
                return img_bytes
                
            except Exception as e:
                print(f"‚ùå Erro ao criar gr√°fico: {e}")
                return None
        
        def get_statistics(df):
            """Calcula estat√≠sticas atuais"""
            try:
                current = df.iloc[-1]
                previous_week = df[df['data'] >= (current['data'] - timedelta(days=7))]
                
                if len(previous_week) > 1:
                    variation = current['nivel_rio'] - previous_week.iloc[0]['nivel_rio']
                    variation_text = f"{variation:+.2f}m"
                else:
                    variation_text = "N/A"
                
                return {
                    'current_level': f"{current['nivel_rio']:.2f}m",
                    'current_date': current['data'].strftime('%d/%m/%Y'),
                    'variation_7d': variation_text,
                    'max_level': f"{df['nivel_rio'].max():.2f}m",
                    'min_level': f"{df['nivel_rio'].min():.2f}m"
                }
            except Exception as e:
                print(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
                return {}
        
        def create_email_content(stats, chart_available=True):
            """Cria conte√∫do HTML do email"""
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }}
                    .container {{ max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
                    .header {{ background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); color: white; padding: 30px 20px; text-align: center; }}
                    .content {{ padding: 30px 20px; }}
                    .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }}
                    .stat-card {{ background: #f8fafc; border-radius: 8px; padding: 15px; text-align: center; border-left: 4px solid #3b82f6; }}
                    .stat-value {{ font-size: 24px; font-weight: bold; color: #1e40af; }}
                    .stat-label {{ font-size: 12px; color: #64748b; margin-top: 5px; }}
                    .chart {{ text-align: center; margin: 20px 0; }}
                    .footer {{ background: #f8fafc; padding: 20px; text-align: center; font-size: 12px; color: #64748b; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üåä Rio Negro Manaus</h1>
                        <p>Relat√≥rio Di√°rio - {datetime.now().strftime('%d/%m/%Y')}</p>
                    </div>
                    
                    <div class="content">
                        <h2>üìä Estat√≠sticas Atuais</h2>
                        
                        <div class="stats">
                            <div class="stat-card">
                                <div class="stat-value">{stats.get('current_level', 'N/A')}</div>
                                <div class="stat-label">N√≠vel Atual</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">{stats.get('variation_7d', 'N/A')}</div>
                                <div class="stat-label">Varia√ß√£o 7 dias</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">{stats.get('max_level', 'N/A')}</div>
                                <div class="stat-label">M√°ximo Hist√≥rico</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">{stats.get('min_level', 'N/A')}</div>
                                <div class="stat-label">M√≠nimo Hist√≥rico</div>
                            </div>
                        </div>
                        
                        {'<div class="chart"><p><strong>üìà Gr√°fico dos √öltimos 30 Dias</strong></p><p><em>Veja o gr√°fico em anexo</em></p></div>' if chart_available else ''}
                        
                        <p>Acesse o site completo: <a href="https://nivel-rio-negro.vercel.app">nivel-rio-negro.vercel.app</a></p>
                    </div>
                    
                    <div class="footer">
                        <p>Newsletter autom√°tica do Rio Negro Manaus</p>
                        <p>Desenvolvido por Bemol ‚Ä¢ Dados do Porto de Manaus</p>
                    </div>
                </div>
            </body>
            </html>
            """
            return html
        
        def send_emails(emails, html_content, chart_bytes=None):
            """Envia emails para a lista"""
            gmail_user = os.environ.get('GMAIL_USER')
            gmail_password = os.environ.get('GMAIL_PASSWORD')
            
            if not gmail_user or not gmail_password:
                print("‚ùå Credenciais do Gmail n√£o configuradas")
                return False
            
            try:
                server = smtplib.SMTP('smtp.gmail.com', 587)
                server.starttls()
                server.login(gmail_user, gmail_password)
                
                sent_count = 0
                
                for email in emails:
                    try:
                        msg = MIMEMultipart('related')
                        msg['From'] = gmail_user
                        msg['To'] = email
                        msg['Subject'] = f"üåä Rio Negro Manaus - Relat√≥rio {datetime.now().strftime('%d/%m/%Y')}"
                        
                        msg.attach(MIMEText(html_content, 'html'))
                        
                        if chart_bytes:
                            img = MIMEImage(chart_bytes)
                            img.add_header('Content-ID', '<chart>')
                            msg.attach(img)
                        
                        server.send_message(msg)
                        sent_count += 1
                        print(f"‚úÖ Email enviado para {email}")
                        
                    except Exception as e:
                        print(f"‚ùå Erro ao enviar para {email}: {e}")
                
                server.quit()
                print(f"üìß Newsletter enviada para {sent_count}/{len(emails)} emails")
                return sent_count > 0
                
            except Exception as e:
                print(f"‚ùå Erro no servidor de email: {e}")
                return False
        
        # Execu√ß√£o principal
        print("üöÄ Iniciando envio da newsletter...")
        
        # Buscar emails
        emails = fetch_emails_from_api()
        if not emails:
            print("üì≠ Nenhum email encontrado. Newsletter n√£o enviada.")
            exit(0)
        
        # Carregar dados
        df = load_data()
        if df is None:
            print("‚ùå N√£o foi poss√≠vel carregar dados")
            exit(1)
        
        # Calcular estat√≠sticas
        stats = get_statistics(df)
        
        # Criar gr√°fico
        chart_bytes = create_chart(df)
        
        # Criar conte√∫do do email
        html_content = create_email_content(stats, chart_bytes is not None)
        
        # Enviar emails
        success = send_emails(emails, html_content, chart_bytes)
        
        if success:
            print("‚úÖ Newsletter enviada com sucesso!")
        else:
            print("‚ùå Falha no envio da newsletter")
            exit(1)
        
        EOF
        
    - name: Create update script
      run: |
        cat > update_subscriber_count.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import json
        from datetime import datetime

        def update_subscriber_count():
            try:
                emails_json = os.getenv('NEWSLETTER_EMAILS', '[]')
                emails_list = json.loads(emails_json)
                
                active_count = len([item for item in emails_list if item.get('ativo', True)])
                total_count = len(emails_list)
                
                public_data = {
                    "info": "Este arquivo √© apenas um placeholder. Os emails reais ficam armazenados de forma segura nos GitHub Secrets.",
                    "total_subscribers": active_count,
                    "total_all_time": total_count,
                    "last_updated": datetime.now().isoformat(),
                    "status": "active"
                }
                
                with open('data/newsletter-emails.json', 'w', encoding='utf-8') as f:
                    json.dump(public_data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ Contador atualizado: {active_count} inscritos ativos")
                return True
                
            except Exception as e:
                print(f"‚ùå Erro ao atualizar contador: {e}")
                return False

        if __name__ == "__main__":
            update_subscriber_count()
        EOF
        
    - name: Update subscriber count
      env:
        NEWSLETTER_EMAILS: ${{ secrets.NEWSLETTER_EMAILS }}
      run: |
        python update_subscriber_count.py
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/newsletter-emails.json
        git diff --staged --quiet || git commit -m "üìä Atualizar contador de inscritos da newsletter"
        git push

  add-subscriber:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' && github.event.action == 'new-subscriber'
    
    steps:
    - name: Add new subscriber
      env:
        NEWSLETTER_EMAILS: ${{ secrets.NEWSLETTER_EMAILS }}
        NEW_EMAIL: ${{ github.event.client_payload.email }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Funcionalidade de adicionar subscriber ser√° implementada posteriormente" 